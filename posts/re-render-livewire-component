---
Image: 
Title: How to force re-render a Livewire component
Description: Stop pulling your hair. Here's a solution to your reactivity issues in Livewire.
Canonical: 
Audio:
Published at: 2024-01-10
Modified at:
Categories: laravel, livewire
---

## Introduction to re-renderings in Livewire

Forcing components to re-render in Livewire is the secret for a better user experience. In my post about [Livewire best practices](/livewire-best-practices), I talk about how keeping lists in sync by defer their management to the top component. But sometimes, that’s just not enough and that where this article comes in handy.

## Create an empty listener method

Let’s say that for some reasons, you have a child component that handles creating new resources and therefore, prevents the parent component from refreshing the list.

**Well, I have a solution for you: create an empty listener method in your parent component.**

Here’s the child component’s class:

```php
namespace App\Livewire;

use Livewire\Component;

class Item extends Component
{
    public function create()
    {
        // Create the resource.

        $this->dispatch(‘created’);
    }
}
```

And here’s your parent component’s class:

```php
namespace App\Livewire;

use Livewire\Component;
use Livewire\Attributes\On;

class Listing extends Component
{
    #[On(’created’)]
    public function refresh()
    {
    }
}
```

## Use the secret $render method

Alternatively, you can listen for the “created” we made up for this article right in DOM. It’s a matter of preference, because both methods will work and produce the exact same result.

Here’s the parent component’s Blade view:

```blade
<div @created=“$refresh”>
    @foreach ($items as $item)
        <livewire:item :$item />
    @endforeach
</div>
```
